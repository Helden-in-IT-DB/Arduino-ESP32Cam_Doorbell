
#include <esp_int_wdt.h>
#include <esp_task_wdt.h>

static esp_err_t cmd_handler(httpd_req_t *req) {
  char *buf;
  size_t buf_len;
  char variable[32] = {
    0,
  };
  char value[32] = {
    0,
  };

  flashLED(75);

  buf_len = httpd_req_get_url_query_len(req) + 1;
  if (buf_len > 1) {
    buf = (char *)malloc(buf_len);
    if (!buf) {
      httpd_resp_send_500(req);
      return ESP_FAIL;
    }
    if (httpd_req_get_url_query_str(req, buf, buf_len) == ESP_OK) {
      if (httpd_query_key_value(buf, "var", variable, sizeof(variable)) == ESP_OK && httpd_query_key_value(buf, "val", value, sizeof(value)) == ESP_OK) {
      } else {
        free(buf);
        httpd_resp_send_404(req);
        return ESP_FAIL;
      }
    } else {
      free(buf);
      httpd_resp_send_404(req);
      return ESP_FAIL;
    }
    free(buf);
  } else {
    httpd_resp_send_404(req);
    return ESP_FAIL;
  }

  if (critERR.length() > 0) return httpd_resp_send_500(req);

  int val = atoi(value);
  sensor_t *s = esp_camera_sensor_get();
  int res = 0;
  if (!strcmp(variable, "framesize")) {
    if (s->pixformat == PIXFORMAT_JPEG) res = s->set_framesize(s, (framesize_t)val);
  } else if (!strcmp(variable, "quality")) res = s->set_quality(s, val);
  else if (!strcmp(variable, "xclk")) {
    xclk = val;
    res = s->set_xclk(s, LEDC_TIMER_0, val);
  }
  else if (!strcmp(variable, "contrast")) res = s->set_contrast(s, val);
  else if (!strcmp(variable, "brightness")) res = s->set_brightness(s, val);
  else if (!strcmp(variable, "saturation")) res = s->set_saturation(s, val);
  else if (!strcmp(variable, "gainceiling")) res = s->set_gainceiling(s, (gainceiling_t)val);
  else if (!strcmp(variable, "min_frame_time")) minFrameTime = val;
  else if (!strcmp(variable, "autolamp") && (lampVal != -1)) {
    autoLamp = val;
    if (autoLamp) {
      if (streamCount > 0) setLamp(lampVal);
      else setLamp(0);
    } else {
      setLamp(lampVal);
    }
  } else if (!strcmp(variable, "lamp") && (lampVal != -1)) {
    lampVal = constrain(val, 0, 100);
    if (autoLamp) {
      if (streamCount > 0) setLamp(lampVal);
      else setLamp(0);
    } else {
      setLamp(lampVal);
    }
  } else if (!strcmp(variable, "reboot")) {
    if (lampVal != -1) setLamp(0);  // kill the lamp; otherwise it can remain on during the soft-reboot
    esp_task_wdt_init(3, true);     // schedule a a watchdog panic event for 3 seconds in the future
    esp_task_wdt_add(NULL);
    periph_module_disable(PERIPH_I2C0_MODULE);  // try to shut I2C down properly
    periph_module_disable(PERIPH_I2C1_MODULE);
    periph_module_reset(PERIPH_I2C0_MODULE);
    periph_module_reset(PERIPH_I2C1_MODULE);
    Serial.print("REBOOT requested");
    while (true) {
      flashLED(50);
      delay(150);
      Serial.print('.');
    }
  } else {
    res = -1;
  }
  if (res) {
    return httpd_resp_send_500(req);
  }
  httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
  return httpd_resp_send(req, NULL, 0);
}