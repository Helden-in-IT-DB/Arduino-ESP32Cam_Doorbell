#include <esp_http_server.h>
#include <esp_timer.h>

extern int8_t streamCount;
extern unsigned long streamsServed;
extern int minFrameTime;

typedef struct {
  httpd_req_t *req;
  size_t len;
} jpg_chunking_t;

#define PART_BOUNDARY "123456789000000000000987654321"
static const char *_STREAM_CONTENT_TYPE = "multipart/x-mixed-replace;boundary=" PART_BOUNDARY;
static const char *_STREAM_BOUNDARY = "\r\n--" PART_BOUNDARY "\r\n";
static const char *_STREAM_PART = "Content-Type: image/jpeg\r\nContent-Length: %u\r\n\r\n";

// Flag to enable Camera
bool enableCamera;
// Flag that can be set to kill all active streams
bool streamKill;


// Handles Camera Stream to Page
static esp_err_t stream_handler(httpd_req_t *req) {
  camera_fb_t *fb = NULL;
  esp_err_t res = ESP_OK;
  size_t _jpg_buf_len = 0;
  uint8_t *_jpg_buf = NULL;
  char *part_buf[64];

  streamKill = false;

  Serial.println("Stream requested");
  if (autoLamp && (lampVal != -1)) setLamp(lampVal);
  streamCount = 1;  // at present we only have one stream handler, so values are 0 or 1..
  flashLED(75);     // double flash of status LED
  delay(75);
  flashLED(75);

  static int64_t last_frame = 0;
  if (!last_frame) {
    last_frame = esp_timer_get_time();
  }

  res = httpd_resp_set_type(req, _STREAM_CONTENT_TYPE);
  if (res != ESP_OK) {
    streamCount = 0;
    if (autoLamp && (lampVal != -1)) setLamp(0);
    Serial.println("STREAM: failed to set HTTP response type");
    return res;
  }

  httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");

  if (res == ESP_OK) {
    res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
  }

	// GET CAMERA
  while (enableCamera) {
    fb = esp_camera_fb_get();
    if (!fb) {
      Serial.println("STREAM: failed to acquire frame");
      res = ESP_FAIL;
    } else {
      if (fb->format != PIXFORMAT_JPEG) {
        Serial.println("STREAM: Non-JPEG frame returned by camera module");
        res = ESP_FAIL;
      } else {
        _jpg_buf_len = fb->len;
        _jpg_buf = fb->buf;
      }
    }
    if (res == ESP_OK) {
      size_t hlen = snprintf((char *)part_buf, 64, _STREAM_PART, _jpg_buf_len);
      res = httpd_resp_send_chunk(req, (const char *)part_buf, hlen);
    }
    if (res == ESP_OK) {
      res = httpd_resp_send_chunk(req, (const char *)_jpg_buf, _jpg_buf_len);
    }
    if (res == ESP_OK) {
      res = httpd_resp_send_chunk(req, _STREAM_BOUNDARY, strlen(_STREAM_BOUNDARY));
    }
    if (fb) {
      esp_camera_fb_return(fb);
      fb = NULL;
      _jpg_buf = NULL;
    } else if (_jpg_buf) {
      free(_jpg_buf);
      _jpg_buf = NULL;
    }
    if (res != ESP_OK) {
      // This is the error exit point from the stream loop.
      // We end the stream here only if a Hard failure has been encountered or the connection has been interrupted.
      Serial.printf("Stream failed, code = %i : %s\r\n", res, esp_err_to_name(res));
      break;
    }
    if ((res != ESP_OK) || streamKill) {
      // We end the stream here when a kill is signalled.
      Serial.printf("Stream killed\r\n");
      break;
    }
    int64_t frame_time = esp_timer_get_time() - last_frame;
    frame_time /= 1000;
    int32_t frame_delay = (minFrameTime > frame_time) ? minFrameTime - frame_time : 0;
    delay(frame_delay);

    if (debugData) {
      Serial.printf("MJPG: %uB %ums, delay: %ums, framerate (%.1ffps)\r\n",
                    (uint32_t)(_jpg_buf_len),
                    (uint32_t)frame_time, frame_delay, 1000.0 / (uint32_t)(frame_time + frame_delay));
    }
    last_frame = esp_timer_get_time();
  }
//

  streamsServed++;
  streamCount = 0;
  if (autoLamp && (lampVal != -1)) setLamp(0);
  Serial.println("Stream ended");
  last_frame = 0;
  return res;
}

static esp_err_t stop_handler(httpd_req_t *req) {
  flashLED(75);
  Serial.println("\r\nStream stop requested via Web");
  streamKill = true;
  httpd_resp_set_hdr(req, "Access-Control-Allow-Origin", "*");
  return httpd_resp_send(req, NULL, 0);
}

static esp_err_t streamviewer_handler(httpd_req_t *req) {
  flashLED(75);
  Serial.println("Stream viewer requested");
  httpd_resp_set_type(req, "text/html");
  httpd_resp_set_hdr(req, "Content-Encoding", "identity");
  return httpd_resp_send(req, (const char *)streamviewer_html, streamviewer_html_len);
}
